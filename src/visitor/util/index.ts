import type ts from "typescript";

export const enum VisitHint {
    None,
    Expression
}

export interface Visitor<T extends ts.Node = ts.Node> {
    (hint: VisitHint, node: T): ts.Node | ts.Node[] | undefined;
}

export type Visitors = { [T in keyof NodeTypes]?: Visitor<NodeTypes[T]> };

export type NodeTypes = {
    [ts.SyntaxKind.ArrayBindingPattern]: ts.ArrayBindingPattern;
    [ts.SyntaxKind.ArrayLiteralExpression]: ts.ArrayLiteralExpression;
    [ts.SyntaxKind.ArrowFunction]: ts.ArrowFunction;
    [ts.SyntaxKind.AsExpression]: ts.AsExpression;
    [ts.SyntaxKind.AssertClause]: ts.AssertClause;
    [ts.SyntaxKind.AssertEntry]: ts.AssertEntry;
    [ts.SyntaxKind.AssertsKeyword]: ts.AssertsKeyword;
    [ts.SyntaxKind.AwaitExpression]: ts.AwaitExpression;
    [ts.SyntaxKind.AwaitKeyword]: ts.AwaitKeyword;
    [ts.SyntaxKind.BigIntLiteral]: ts.BigIntLiteral;
    [ts.SyntaxKind.BinaryExpression]: ts.BinaryExpression;
    [ts.SyntaxKind.BindingElement]: ts.BindingElement;
    [ts.SyntaxKind.Block]: ts.Block;
    [ts.SyntaxKind.BreakStatement]: ts.BreakStatement;
    [ts.SyntaxKind.Bundle]: ts.Bundle;
    [ts.SyntaxKind.CallExpression]: ts.CallExpression;
    [ts.SyntaxKind.CaseBlock]: ts.CaseBlock;
    [ts.SyntaxKind.CaseClause]: ts.CaseClause;
    [ts.SyntaxKind.CaseKeyword]: ts.CaseKeyword;
    [ts.SyntaxKind.CatchClause]: ts.CatchClause;
    [ts.SyntaxKind.ClassDeclaration]: ts.ClassDeclaration;
    [ts.SyntaxKind.ClassExpression]: ts.ClassExpression;
    [ts.SyntaxKind.ClassStaticBlockDeclaration]: ts.ClassStaticBlockDeclaration;
    [ts.SyntaxKind.CommaListExpression]: ts.CommaListExpression;
    [ts.SyntaxKind.ComputedPropertyName]: ts.ComputedPropertyName;
    [ts.SyntaxKind.ConditionalExpression]: ts.ConditionalExpression;
    [ts.SyntaxKind.ContinueStatement]: ts.ContinueStatement;
    [ts.SyntaxKind.DebuggerStatement]: ts.DebuggerStatement;
    [ts.SyntaxKind.Decorator]: ts.Decorator;
    [ts.SyntaxKind.DefaultClause]: ts.DefaultClause;
    [ts.SyntaxKind.DeleteExpression]: ts.DeleteExpression;
    [ts.SyntaxKind.DoStatement]: ts.DoStatement;
    [ts.SyntaxKind.ElementAccessExpression]: ts.ElementAccessExpression;
    [ts.SyntaxKind.EmptyStatement]: ts.EmptyStatement;
    [ts.SyntaxKind.EnumDeclaration]: ts.EnumDeclaration;
    [ts.SyntaxKind.EnumMember]: ts.EnumMember;
    [ts.SyntaxKind.ExportAssignment]: ts.ExportAssignment;
    [ts.SyntaxKind.ExportDeclaration]: ts.ExportDeclaration;
    [ts.SyntaxKind.ExportSpecifier]: ts.ExportSpecifier;
    [ts.SyntaxKind.ExpressionStatement]: ts.ExpressionStatement;
    [ts.SyntaxKind.ExpressionWithTypeArguments]: ts.ExpressionWithTypeArguments;
    [ts.SyntaxKind.ExternalModuleReference]: ts.ExternalModuleReference;
    [ts.SyntaxKind.ForInStatement]: ts.ForInStatement;
    [ts.SyntaxKind.ForOfStatement]: ts.ForOfStatement;
    [ts.SyntaxKind.ForStatement]: ts.ForStatement;
    [ts.SyntaxKind.FunctionDeclaration]: ts.FunctionDeclaration;
    [ts.SyntaxKind.FunctionExpression]: ts.FunctionExpression;
    [ts.SyntaxKind.GetAccessor]: ts.GetAccessorDeclaration;
    [ts.SyntaxKind.HeritageClause]: ts.HeritageClause;
    [ts.SyntaxKind.Identifier]: ts.Identifier;
    [ts.SyntaxKind.IfStatement]: ts.IfStatement;
    [ts.SyntaxKind.ImportAttribute]: ts.ImportAttribute;
    [ts.SyntaxKind.ImportAttributes]: ts.ImportAttributes;
    [ts.SyntaxKind.ImportClause]: ts.ImportClause;
    [ts.SyntaxKind.ImportDeclaration]: ts.ImportDeclaration;
    [ts.SyntaxKind.ImportEqualsDeclaration]: ts.ImportEqualsDeclaration;
    [ts.SyntaxKind.ImportSpecifier]: ts.ImportSpecifier;
    [ts.SyntaxKind.ImportTypeAssertionContainer]: ts.ImportTypeAssertionContainer;
    [ts.SyntaxKind.InterfaceDeclaration]: ts.InterfaceDeclaration;
    [ts.SyntaxKind.JSDoc]: ts.JSDoc;
    [ts.SyntaxKind.JSDocAllType]: ts.JSDocAllType;
    [ts.SyntaxKind.JSDocAugmentsTag]: ts.JSDocAugmentsTag;
    [ts.SyntaxKind.JSDocAuthorTag]: ts.JSDocAuthorTag;
    [ts.SyntaxKind.JSDocCallbackTag]: ts.JSDocCallbackTag;
    [ts.SyntaxKind.JSDocClassTag]: ts.JSDocClassTag;
    [ts.SyntaxKind.JSDocDeprecatedTag]: ts.JSDocDeprecatedTag;
    [ts.SyntaxKind.JSDocEnumTag]: ts.JSDocEnumTag;
    [ts.SyntaxKind.JSDocFunctionType]: ts.JSDocFunctionType;
    [ts.SyntaxKind.JSDocImplementsTag]: ts.JSDocImplementsTag;
    [ts.SyntaxKind.JSDocImportTag]: ts.JSDocImportTag;
    [ts.SyntaxKind.JSDocLink]: ts.JSDocLink;
    [ts.SyntaxKind.JSDocLinkCode]: ts.JSDocLinkCode;
    [ts.SyntaxKind.JSDocLinkPlain]: ts.JSDocLinkPlain;
    [ts.SyntaxKind.JSDocMemberName]: ts.JSDocMemberName;
    [ts.SyntaxKind.JSDocNameReference]: ts.JSDocNameReference;
    [ts.SyntaxKind.JSDocNamepathType]: ts.JSDocNamepathType;
    [ts.SyntaxKind.JSDocNonNullableType]: ts.JSDocNonNullableType;
    [ts.SyntaxKind.JSDocNullableType]: ts.JSDocNullableType;
    [ts.SyntaxKind.JSDocOptionalType]: ts.JSDocOptionalType;
    [ts.SyntaxKind.JSDocOverloadTag]: ts.JSDocOverloadTag;
    [ts.SyntaxKind.JSDocOverrideTag]: ts.JSDocOverrideTag;
    [ts.SyntaxKind.JSDocParameterTag]: ts.JSDocParameterTag;
    [ts.SyntaxKind.JSDocPrivateTag]: ts.JSDocPrivateTag;
    [ts.SyntaxKind.JSDocPropertyTag]: ts.JSDocPropertyTag;
    [ts.SyntaxKind.JSDocProtectedTag]: ts.JSDocProtectedTag;
    [ts.SyntaxKind.JSDocPublicTag]: ts.JSDocPublicTag;
    [ts.SyntaxKind.JSDocReadonlyTag]: ts.JSDocReadonlyTag;
    [ts.SyntaxKind.JSDocReturnTag]: ts.JSDocReturnTag;
    [ts.SyntaxKind.JSDocSatisfiesTag]: ts.JSDocSatisfiesTag;
    [ts.SyntaxKind.JSDocSeeTag]: ts.JSDocSeeTag;
    [ts.SyntaxKind.JSDocSignature]: ts.JSDocSignature;
    [ts.SyntaxKind.JSDocTag]: ts.JSDocTag;
    [ts.SyntaxKind.JSDocTemplateTag]: ts.JSDocTemplateTag;
    [ts.SyntaxKind.JSDocThisTag]: ts.JSDocThisTag;
    [ts.SyntaxKind.JSDocThrowsTag]: ts.JSDocThrowsTag;
    [ts.SyntaxKind.JSDocTypeExpression]: ts.JSDocTypeExpression;
    [ts.SyntaxKind.JSDocTypeLiteral]: ts.JSDocTypeLiteral;
    [ts.SyntaxKind.JSDocTypeTag]: ts.JSDocTypeTag;
    [ts.SyntaxKind.JSDocTypedefTag]: ts.JSDocTypedefTag;
    [ts.SyntaxKind.JSDocUnknownType]: ts.JSDocUnknownType;
    [ts.SyntaxKind.JSDocVariadicType]: ts.JSDocVariadicType;
    [ts.SyntaxKind.JsxAttribute]: ts.JsxAttribute;
    [ts.SyntaxKind.JsxAttributes]: ts.JsxAttributes;
    [ts.SyntaxKind.JsxClosingElement]: ts.JsxClosingElement;
    [ts.SyntaxKind.JsxClosingFragment]: ts.JsxClosingFragment;
    [ts.SyntaxKind.JsxElement]: ts.JsxElement;
    [ts.SyntaxKind.JsxExpression]: ts.JsxExpression;
    [ts.SyntaxKind.JsxFragment]: ts.JsxFragment;
    [ts.SyntaxKind.JsxNamespacedName]: ts.JsxNamespacedName;
    [ts.SyntaxKind.JsxOpeningElement]: ts.JsxOpeningElement;
    [ts.SyntaxKind.JsxOpeningFragment]: ts.JsxOpeningFragment;
    [ts.SyntaxKind.JsxSelfClosingElement]: ts.JsxSelfClosingElement;
    [ts.SyntaxKind.JsxSpreadAttribute]: ts.JsxSpreadAttribute;
    [ts.SyntaxKind.JsxText]: ts.JsxText;
    [ts.SyntaxKind.LabeledStatement]: ts.LabeledStatement;
    [ts.SyntaxKind.MetaProperty]: ts.MetaProperty;
    [ts.SyntaxKind.MethodDeclaration]: ts.MethodDeclaration;
    [ts.SyntaxKind.MethodSignature]: ts.MethodSignature;
    [ts.SyntaxKind.MissingDeclaration]: ts.MissingDeclaration;
    [ts.SyntaxKind.ModuleBlock]: ts.ModuleBlock;
    [ts.SyntaxKind.ModuleDeclaration]: ts.ModuleDeclaration;
    [ts.SyntaxKind.NamedExports]: ts.NamedExports;
    [ts.SyntaxKind.NamedImports]: ts.NamedImports;
    [ts.SyntaxKind.NamedTupleMember]: ts.NamedTupleMember;
    [ts.SyntaxKind.NamespaceExport]: ts.NamespaceExport;
    [ts.SyntaxKind.NamespaceExportDeclaration]: ts.NamespaceExportDeclaration;
    [ts.SyntaxKind.NamespaceImport]: ts.NamespaceImport;
    [ts.SyntaxKind.NewExpression]: ts.NewExpression;
    [ts.SyntaxKind.NoSubstitutionTemplateLiteral]: ts.NoSubstitutionTemplateLiteral;
    [ts.SyntaxKind.NonNullExpression]: ts.NonNullExpression;
    [ts.SyntaxKind.NotEmittedStatement]: ts.NotEmittedStatement;
    [ts.SyntaxKind.NumericLiteral]: ts.NumericLiteral;
    [ts.SyntaxKind.ObjectBindingPattern]: ts.ObjectBindingPattern;
    [ts.SyntaxKind.ObjectLiteralExpression]: ts.ObjectLiteralExpression;
    [ts.SyntaxKind.OmittedExpression]: ts.OmittedExpression;
    [ts.SyntaxKind.Parameter]: ts.ParameterDeclaration;
    [ts.SyntaxKind.ParenthesizedExpression]: ts.ParenthesizedExpression;
    [ts.SyntaxKind.PartiallyEmittedExpression]: ts.PartiallyEmittedExpression;
    [ts.SyntaxKind.PostfixUnaryExpression]: ts.PostfixUnaryExpression;
    [ts.SyntaxKind.PrefixUnaryExpression]: ts.PrefixUnaryExpression;
    [ts.SyntaxKind.PrivateIdentifier]: ts.PrivateIdentifier;
    [ts.SyntaxKind.PropertyAccessExpression]: ts.PropertyAccessExpression;
    [ts.SyntaxKind.PropertyAssignment]: ts.PropertyAssignment;
    [ts.SyntaxKind.PropertyDeclaration]: ts.PropertyDeclaration;
    [ts.SyntaxKind.PropertySignature]: ts.PropertySignature;
    [ts.SyntaxKind.QualifiedName]: ts.QualifiedName;
    [ts.SyntaxKind.ReadonlyKeyword]: ts.ReadonlyKeyword;
    [ts.SyntaxKind.RegularExpressionLiteral]: ts.RegularExpressionLiteral;
    [ts.SyntaxKind.ReturnStatement]: ts.ReturnStatement;
    [ts.SyntaxKind.SatisfiesExpression]: ts.SatisfiesExpression;
    [ts.SyntaxKind.SemicolonClassElement]: ts.SemicolonClassElement;
    [ts.SyntaxKind.SetAccessor]: ts.SetAccessorDeclaration;
    [ts.SyntaxKind.ShorthandPropertyAssignment]: ts.ShorthandPropertyAssignment;
    [ts.SyntaxKind.SourceFile]: ts.SourceFile;
    [ts.SyntaxKind.SpreadAssignment]: ts.SpreadAssignment;
    [ts.SyntaxKind.SpreadElement]: ts.SpreadElement;
    [ts.SyntaxKind.StringLiteral]: ts.StringLiteral;
    [ts.SyntaxKind.SwitchStatement]: ts.SwitchStatement;
    [ts.SyntaxKind.SyntaxList]: ts.SyntaxList;
    [ts.SyntaxKind.SyntheticExpression]: ts.SyntheticExpression;
    [ts.SyntaxKind.TaggedTemplateExpression]: ts.TaggedTemplateExpression;
    [ts.SyntaxKind.TemplateExpression]: ts.TemplateExpression;
    [ts.SyntaxKind.TemplateHead]: ts.TemplateHead;
    [ts.SyntaxKind.TemplateLiteralTypeSpan]: ts.TemplateLiteralTypeSpan;
    [ts.SyntaxKind.TemplateMiddle]: ts.TemplateMiddle;
    [ts.SyntaxKind.TemplateSpan]: ts.TemplateSpan;
    [ts.SyntaxKind.TemplateTail]: ts.TemplateTail;
    [ts.SyntaxKind.ThrowStatement]: ts.ThrowStatement;
    [ts.SyntaxKind.TryStatement]: ts.TryStatement;
    [ts.SyntaxKind.TypeAliasDeclaration]: ts.TypeAliasDeclaration;
    [ts.SyntaxKind.TypeAssertionExpression]: ts.TypeAssertion;
    [ts.SyntaxKind.TypeOfExpression]: ts.TypeOfExpression;
    [ts.SyntaxKind.VariableDeclaration]: ts.VariableDeclaration;
    [ts.SyntaxKind.VariableDeclarationList]: ts.VariableDeclarationList;
    [ts.SyntaxKind.VariableStatement]: ts.VariableStatement;
    [ts.SyntaxKind.VoidExpression]: ts.VoidExpression;
    [ts.SyntaxKind.WhileStatement]: ts.WhileStatement;
    [ts.SyntaxKind.WithStatement]: ts.WithStatement;
    [ts.SyntaxKind.YieldExpression]: ts.YieldExpression;
    default: ts.Node;
};

export const wrap = (visitor: Visitor, hint: VisitHint = VisitHint.None): ts.Visitor => (node) => visitor(hint, node);